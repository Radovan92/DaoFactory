import type * as ever from 'everscale-inpage-provider';
import type * as nt from 'nekoton-wasm';
import { Keystore } from './keystore';
/**
 * @category AccountsStorage
 */
export interface AccountsStorage {
    /**
     * Selected default account
     */
    defaultAccount: string | undefined;
    /**
     * Returns account for given address
     * @param address: account address
     */
    getAccount(address: string): Promise<Account | undefined>;
}
/**
 * @category AccountsStorage
 */
export interface Account {
    /**
     * Account contract address
     */
    readonly address: string;
    /**
     * Prepares and signs an external message to this account
     *
     * @param args
     * @param ctx
     */
    prepareMessage(args: PrepareMessageParams, ctx: PrepareMessageContext): Promise<nt.SignedMessage>;
}
/**
 * @category AccountsStorage
 */
export declare type PrepareMessageParams = {
    /**
     * Message destination address
     */
    recipient: string;
    /**
     * Optional base64 encoded `.tvc` file.
     *
     * NOTE: Not guaranteed to be supported
     */
    stateInit?: string;
    /**
     * Amount of nano EVER to send
     */
    amount: string;
    /**
     * Whether to bounce message back on error
     */
    bounce: boolean;
    /**
     * Optional function call
     */
    payload?: ever.FunctionCall<string>;
};
/**
 * @category AccountsStorage
 */
export declare type PrepareMessageContext = {
    /**
     * Provider clock
     */
    clock: nt.ClockWithOffset;
    /**
     * Provider keystore
     */
    keystore: Keystore;
};
/**
 * @category AccountsStorage
 */
export declare class SimpleAccountsStorage implements AccountsStorage {
    private _defaultAccount;
    private readonly accounts;
    /**
     * Creates new simple accounts storage.
     *
     * If no `defaultAccount` provided, uses first provided entry
     *
     * @param args
     */
    constructor(args?: {
        defaultAccount?: string;
        entries?: Iterable<Account>;
    });
    get defaultAccount(): string | undefined;
    set defaultAccount(value: string | undefined);
    getAccount(address: string): Promise<Account | undefined>;
    addAccount(account: Account): void;
    hasAccount(address: string): boolean;
    removeAccount(address: string): void;
}
